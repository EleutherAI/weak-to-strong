import os
from train_simple import main as train_simple_main
from typing import List, Union
import traceback

import fire

from weak_to_strong.train_config import TrainConfig


def split_possible_string_list(model_sizes: Union[List[str], str]) -> List[str]:
    if isinstance(model_sizes, str):
        return model_sizes.split(",")
    return model_sizes


def main(
    weak_model_sizes: Union[List[str], str],
    strong_model_sizes: Union[List[str], str],
    **args,
):
    """
    This first trains a sequence of weak models and then a sequence of strong models
    (configured by the arguments without a prefix and overridden by arguments with "gt_" prefix).

    Then it trains each strong model on labels generated by each weak model
    (configured by the arguments without a prefix and overridden by arguments with "w2s_" prefix).
    """
    # parser = ArgumentParser(add_config_path_arg=True, conflict_resolution=ConflictResolution.AUTO)
    # parser.add_argument("--weak_model_sizes", type=str, nargs="+", default=None)
    # parser.add_argument("--strong_model_sizes", type=str, nargs="+", default=None)
    # parser.add_arguments(TrainConfig, dest="both", prefix="")
    # parser.add_arguments(TrainConfig, dest="gt", prefix="gt_")
    # parser.add_arguments(TrainConfig, dest="w2s", prefix="w2s_")
    # args = parser.parse_args()

    weak_model_sizes = split_possible_string_list(weak_model_sizes)
    strong_model_sizes = split_possible_string_list(strong_model_sizes)

    both_args = {
        k: v
        for k, v in args.items()
        if not k.startswith("gt_") and not k.startswith("w2s_")
    }
    gt_args, w2s_args = both_args.copy(), both_args.copy()
    for k, v in args.items():
        if k.startswith("gt_"):
            gt_args[k[3:]] = v
        elif k.startswith("w2s_"):
            w2s_args[k[4:]] = v

    all_model_sizes = weak_model_sizes + strong_model_sizes
    weak_to_strong_model_sizes = [
        (weak, strong) for weak in weak_model_sizes for strong in strong_model_sizes
    ]

    print("Running ground truth models")
    weak_labels_paths = dict()
    for model_size in all_model_sizes:
        print(f"Running ground truth {model_size}")
        current_args = gt_args.copy()
        current_args["model_size"] = model_size
        if model_size not in weak_model_sizes:
            current_args["n_inference_docs"] = 0

        cfg = TrainConfig(**current_args)
        weak_labels_paths[model_size] = os.path.join(cfg.save_path, "weak_labels")

        try:
            train_simple_main(cfg)
        except Exception as e:
            print(f"Failed to run ground truth {model_size}: {e}")
            traceback.print_exc()

    print("Running transfer models")
    for weak_model_size, strong_model_size in weak_to_strong_model_sizes:
        print(f"Running weak {weak_model_size} to strong {strong_model_size}")
        current_args = w2s_args.copy()
        current_args["model_size"] = strong_model_size
        current_args["weak_labels_path"] = weak_labels_paths[weak_model_size]
        cfg = TrainConfig(**current_args)

        try:
            train_simple_main(cfg)
        except Exception as e:
            print(
                f"Failed to run weak {weak_model_size} to strong {strong_model_size}: {e}"
            )
            traceback.print_exc()
    print("Finished running all models")


if __name__ == "__main__":
    fire.Fire(main)
